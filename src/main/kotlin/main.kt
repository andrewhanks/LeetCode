import questions.*

fun main(args: Array<String>) {
//    Question_1_Two_Sum.runQuestion()
//    Question_2_Add_Two_Numbers.runQuestion()
//    Question_3_Longest_Substring_Without_Repeating_Characters.runQuestion()
//    Question_4_Median_of_Two_Sorted_Arrays.runQuestion()
//    Question_5_Longest_Palindromic_Substring.runQuestion()
//    Question_6_Zig_Zag_Conversion.runQuestion()
//    Question_8_String_to_Integer.runQuestion()
//    Question_9_Palindrome_Number.runQuestion()
//    Question_11_Container_With_Most_Water.runQuestion()
//    Question_12_Integer_to_Roman.runQuestion()
//    Question_13_Roman_to_Integer.runQuestion()
//    Question_14_Longest_Common_Prefix.runQuestion()
//    Question_15_3Sum.runQuestion()
//    Question_16_3Sum_Closest.runQuestion()
//    Question_17_Letter_Combinations_of_a_Phone_Number.runQuestion()
//    Question_19_Remove_Nth_Node_From_End_of_List.runQuestion()
//    Question_22_Generate_Parentheses.runQuestion()
//    Question_23_Merge_k_Sorted_Lists.runQuestion()
//    Question_29_Divide_Two_Integers.runQuestion()
//    Question_43_Multiply_Strings.runQuestion()
//    Question_46_Permutations.runQuestion()
    Question_62_Unique_Paths.runQuestion()
//    Question_98_Validate_Binary_Search_Tree.runQuestion()
//    Question_139_Word_Break.runQuestion()
//    Question_215_Kth_Largest_Element_in_an_Array.runQuestion()
//    Question_283_Move_Zeroes.runQuestion()
//    Question_287_Find_the_Duplicate_Number.runQuestion()
//    Question_387_First_Unique_Character_in_a_String.runQuestion()
//    Question_442_Find_All_Duplicates_in_an_Array.runQuestion()
//    Question_576_Out_of_Boundary_Paths.runQuestion()
//    Question_652_Find_Duplicate_Subtrees.runQuestion()
//    Question_781_Rabbits_in_Forest.runQuestion()
//    Question_870_Advantage_Shuffle.runQuestion()
//    Question_876_Middle_of_the_Linked_List.runQuestion()
//    Question_948_Bag_of_Tokens.runQuestion()
//    Question_991_Broken_Calculator.runQuestion()
//    Question_1054_Distant_Barcodes.runQuestion()
//    Question_1110_Delete_Nodes_And_Return_Forest.runQuestion()
//    Question_1248_Count_Number_of_Nice_Subarrays.runQuestion()
//    Question_1301_Number_of_Paths_with_Max_Score.runQuestion()
//    Question_1346_Check_If_N_and_Its_Double_Exist.runQuestion()
//    Question_1405_Longest_Happy_String.runQuestion()
//    Question_1577_Number_of_Ways_Where_Square_of_Number_Is_Equal_to_Product_of_Two_Numbers.runQuestion()
//    Question_1662_Check_If_Two_String_Arrays_are_Equivalent.runQuestion()
//    Question_1705_Maximum_Number_of_Eaten_Apples.runQuestion()
//    Question_1882_Process_Tasks_Using_Servers.runQuestion()
//    Question_1929_Concatenation_of_Array.runQuestion()
//    Question_2032_Two_Out_of_Three.runQuestion()
//    Question_2057_Smallest_Index_With_Equal_Value.runQuestion()
//    Question_2126_Destroying_Asteroids.runQuestion()
//    Question_2216_Minimum_Deletions_to_Make_Array_Beautiful.runQuestion()
//    Question_2337_Move_Pieces_to_Obtain_a_String.runQuestion()
//    Question_2643_Row_With_Maximum_Ones.runQuestion()
//    Question_2685_Count_the_Number_of_Complete_Components.runQuestion()
//    Question_2593_Find_Score_of_an_Array_After_Marking_All_Elements.runQuestion()
//    Question_2639_Find_the_Width_of_Columns_of_a_Grid.runQuestion()
}